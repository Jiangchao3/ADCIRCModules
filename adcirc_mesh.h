#ifndef ADCIRC_MESH_H
#define ADCIRC_MESH_H
/*-------------------------------GPL-------------------------------------//
//
// QADCModules - A library for working with ADCIRC models
// Copyright (C) 2016  Zach Cobell
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------*/
/**
 * \class adcirc_mesh
 *
 * \addtogroup QADCModules
 *
 * \brief Class that describes an ADCIRC mesh
 *
 * \author Zachary Cobell
 * \version Version 0.1
 * \date 02/21/2016
 *
 * Contact: zcobell@gmail.com
 *
 * Created on: 02/21/2016
 *
 */
#include <QObject>
#include <QVector>
#include <QFile>
#include "adcirc_node.h"
#include "adcirc_element.h"
#include "adcirc_boundary.h"

class adcirc_mesh : public QObject
{
    Q_OBJECT
public:
    explicit adcirc_mesh(QObject *parent = 0);



    //...Public variables...//


    ///Filename for this ADCIRC mesh
    QString                            filename;

    ///Title, or header, from the mesh file
    QString                            title;

    ///Number of elements contained within the mesh file
    int                                numElements;

    ///Number of nodes contained with the mesh file
    int                                numNodes;

    ///Vector made up of the class adcirc_node with x, y, and z information for nodes in this mesh
    QVector<adcirc_node*>              nodes;

    ///Vector made up of the class adcirc_element with connectivity information
    QVector<adcirc_element*>           elements;

    ///Number of open boundary conditions contained within the mesh
    int                                numOpenBoundaries;

    ///Total number of open boundary nodes in this mesh
    int                                totNumOpenBoundaryNodes;

    ///Number of land boundary conditions within the mesh
    int                                numLandBonudaries;

    ///Total number of land boundary nodes in this mesh
    int                                totNumLandBoundaryNodes;

    ///Vector made up of the class adcirc_boundary with the open boundary information
    QVector<adcirc_boundary*>          openBC;

    ///Vector made up of the class adcirc_boundary with the land boundary information
    QVector<adcirc_boundary*>          landBC;



    //...Public functions...///



    ///Public function to trigger the reading of an ADCIRC mesh into this class
    int read();

    ///Public function to allow user to trigger writing of the ADCIRC mesh contained within this class
    int write(QString outputFile);

    ///Public function to allow user to get the current error code
    int getErrorCode();

private:

    //...PRIVATE VARIABLES...//

    ///Error code generated by some function in this class
    int errorCode;

    //...PRIVATE FUNCTIONS...//

    /// \brief Private function to read an ADCIRC mesh from the current filename
    int readMesh();

    /// \brief Private function to allocate a vector of pointers and create new adcirc_nodes on the heap
    int allocateNodes();

    /// \brief Private function to allocate a vector of pointers and create new adcirc_elements on the heap
    int allocateElements();

    /** \brief Private function to parse the string from an ADCIRC mesh file containing nodal information
     * @param line  [in]    The QString with the information read from the file to be parsed into an ADCIRC node
     * @param index [in]    An integer for the current node position in the ADCIRC file
     * @param *node [inout] The pointer to the adcirc_node that should be created with this information **/
    int readNode(QString line, int index, adcirc_node *node);

    /** \brief Private function to parse the string from an ADCIRC mesh file containing elemental connectivity information
     * @param line     [in]    The QString with the information read from the file to be parsed into an ADCIRC element
     * @param index    [in]    An integer for the current element position in the ADCIRC file
     * @param *element [inout] The pointer to the adcirc_element that should be created with this information **/
    int readElement(QString line, int index, adcirc_element *element);

};

#endif // ADCIRC_MESH_H
