# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyadcirc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyadcirc')
    _pyadcirc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyadcirc', [dirname(__file__)])
        except ImportError:
            import _pyadcirc
            return _pyadcirc
        if fp is not None:
            try:
                _mod = imp.load_module('_pyadcirc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyadcirc = swig_import_helper()
    del swig_import_helper
else:
    import _pyadcirc
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class AdcircMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdcircMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdcircMesh, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyadcirc.new_AdcircMesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyadcirc.delete_AdcircMesh
    __del__ = lambda self: None

    def read(self):
        return _pyadcirc.AdcircMesh_read(self)

    def filename(self):
        return _pyadcirc.AdcircMesh_filename(self)

    def setFilename(self, *args):
        return _pyadcirc.AdcircMesh_setFilename(self, *args)

    def meshHeaderString(self):
        return _pyadcirc.AdcircMesh_meshHeaderString(self)

    def setMeshHeaderString(self, meshHeaderString):
        return _pyadcirc.AdcircMesh_setMeshHeaderString(self, meshHeaderString)

    def numNodes(self):
        return _pyadcirc.AdcircMesh_numNodes(self)

    def setNumNodes(self, numNodes):
        return _pyadcirc.AdcircMesh_setNumNodes(self, numNodes)

    def numElements(self):
        return _pyadcirc.AdcircMesh_numElements(self)

    def setNumElements(self, numElements):
        return _pyadcirc.AdcircMesh_setNumElements(self, numElements)

    def numOpenBoundaries(self):
        return _pyadcirc.AdcircMesh_numOpenBoundaries(self)

    def setNumOpenBoundaries(self, numOpenBoundaries):
        return _pyadcirc.AdcircMesh_setNumOpenBoundaries(self, numOpenBoundaries)

    def numLandBoundaries(self):
        return _pyadcirc.AdcircMesh_numLandBoundaries(self)

    def setNumLandBoundaries(self, numLandBoundaries):
        return _pyadcirc.AdcircMesh_setNumLandBoundaries(self, numLandBoundaries)

    def totalOpenBoundaryNodes(self):
        return _pyadcirc.AdcircMesh_totalOpenBoundaryNodes(self)

    def setTotalOpenBoundaryNodes(self, totalOpenBoundaryNodes):
        return _pyadcirc.AdcircMesh_setTotalOpenBoundaryNodes(self, totalOpenBoundaryNodes)

    def totalLandBoundaryNodes(self):
        return _pyadcirc.AdcircMesh_totalLandBoundaryNodes(self)

    def setTotalLandBoundaryNodes(self, totalLandBoundaryNodes):
        return _pyadcirc.AdcircMesh_setTotalLandBoundaryNodes(self, totalLandBoundaryNodes)

    def projection(self):
        return _pyadcirc.AdcircMesh_projection(self)

    def defineProjection(self, epsg, isLatLon):
        return _pyadcirc.AdcircMesh_defineProjection(self, epsg, isLatLon)

    def reproject(self, epsg):
        return _pyadcirc.AdcircMesh_reproject(self, epsg)

    def isLatLon(self):
        return _pyadcirc.AdcircMesh_isLatLon(self)

    def toShapefile(self, *args):
        return _pyadcirc.AdcircMesh_toShapefile(self, *args)

    def buildNodalSearchTree(self):
        return _pyadcirc.AdcircMesh_buildNodalSearchTree(self)

    def buildElementalSearchTree(self):
        return _pyadcirc.AdcircMesh_buildElementalSearchTree(self)

    def nodalSearchTreeInitialized(self):
        return _pyadcirc.AdcircMesh_nodalSearchTreeInitialized(self)

    def elementalSearchTreeInitialized(self):
        return _pyadcirc.AdcircMesh_elementalSearchTreeInitialized(self)

    def node(self, index):
        return _pyadcirc.AdcircMesh_node(self, index)

    def element(self, index):
        return _pyadcirc.AdcircMesh_element(self, index)

    def resizeMesh(self, numNodes, numElements, numOpenBoundaries, numLandBoundaries):
        return _pyadcirc.AdcircMesh_resizeMesh(self, numNodes, numElements, numOpenBoundaries, numLandBoundaries)

    def addNode(self, index, node):
        return _pyadcirc.AdcircMesh_addNode(self, index, node)

    def deleteNode(self, index):
        return _pyadcirc.AdcircMesh_deleteNode(self, index)

    def addElement(self, index, element):
        return _pyadcirc.AdcircMesh_addElement(self, index, element)

    def deleteElement(self, index):
        return _pyadcirc.AdcircMesh_deleteElement(self, index)
AdcircMesh_swigregister = _pyadcirc.AdcircMesh_swigregister
AdcircMesh_swigregister(AdcircMesh)

class AdcircNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdcircNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdcircNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyadcirc.new_AdcircNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setNode(self, id, x, y, z):
        return _pyadcirc.AdcircNode_setNode(self, id, x, y, z)

    def x(self):
        return _pyadcirc.AdcircNode_x(self)

    def setX(self, x):
        return _pyadcirc.AdcircNode_setX(self, x)

    def y(self):
        return _pyadcirc.AdcircNode_y(self)

    def setY(self, y):
        return _pyadcirc.AdcircNode_setY(self, y)

    def z(self):
        return _pyadcirc.AdcircNode_z(self)

    def setZ(self, z):
        return _pyadcirc.AdcircNode_setZ(self, z)

    def id(self):
        return _pyadcirc.AdcircNode_id(self)

    def setId(self, id):
        return _pyadcirc.AdcircNode_setId(self, id)
    __swig_destroy__ = _pyadcirc.delete_AdcircNode
    __del__ = lambda self: None
AdcircNode_swigregister = _pyadcirc.AdcircNode_swigregister
AdcircNode_swigregister(AdcircNode)

class AdcircElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdcircElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdcircElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pyadcirc.new_AdcircElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def n(self):
        return _pyadcirc.AdcircElement_n(self)

    def node(self, i):
        return _pyadcirc.AdcircElement_node(self, i)

    def setNode(self, i, node):
        return _pyadcirc.AdcircElement_setNode(self, i, node)

    def id(self):
        return _pyadcirc.AdcircElement_id(self)

    def setId(self, id):
        return _pyadcirc.AdcircElement_setId(self, id)
    __swig_destroy__ = _pyadcirc.delete_AdcircElement
    __del__ = lambda self: None
AdcircElement_swigregister = _pyadcirc.AdcircElement_swigregister
AdcircElement_swigregister(AdcircElement)

class AdcircBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdcircBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdcircBoundary, name)
    __repr__ = _swig_repr

    def __init__(self, boundaryCode, boundaryLength):
        this = _pyadcirc.new_AdcircBoundary(boundaryCode, boundaryLength)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def boundaryCode(self):
        return _pyadcirc.AdcircBoundary_boundaryCode(self)

    def setBoundaryCode(self, boundaryCode):
        return _pyadcirc.AdcircBoundary_setBoundaryCode(self, boundaryCode)

    def boundaryLength(self):
        return _pyadcirc.AdcircBoundary_boundaryLength(self)

    def setBoundaryLength(self, boundaryLength):
        return _pyadcirc.AdcircBoundary_setBoundaryLength(self, boundaryLength)

    def size(self):
        return _pyadcirc.AdcircBoundary_size(self)

    def length(self):
        return _pyadcirc.AdcircBoundary_length(self)

    def crestElevation(self, index):
        return _pyadcirc.AdcircBoundary_crestElevation(self, index)

    def setCrestElevation(self, index, crestElevation):
        return _pyadcirc.AdcircBoundary_setCrestElevation(self, index, crestElevation)

    def subcriticalWeirCoeffient(self, index):
        return _pyadcirc.AdcircBoundary_subcriticalWeirCoeffient(self, index)

    def setSubcriticalWeirCoeffient(self, index, subcriticalWeirCoeffient):
        return _pyadcirc.AdcircBoundary_setSubcriticalWeirCoeffient(self, index, subcriticalWeirCoeffient)

    def supercriticalWeirCoefficient(self, index):
        return _pyadcirc.AdcircBoundary_supercriticalWeirCoefficient(self, index)

    def setSupercriticalWeirCoefficient(self, index, supercriticalWeirCoefficient):
        return _pyadcirc.AdcircBoundary_setSupercriticalWeirCoefficient(self, index, supercriticalWeirCoefficient)

    def pipeHeight(self, index):
        return _pyadcirc.AdcircBoundary_pipeHeight(self, index)

    def setPipeHeight(self, index, pipeHeight):
        return _pyadcirc.AdcircBoundary_setPipeHeight(self, index, pipeHeight)

    def pipeDiameter(self, index):
        return _pyadcirc.AdcircBoundary_pipeDiameter(self, index)

    def setPipeDiameter(self, index, pipeDiameter):
        return _pyadcirc.AdcircBoundary_setPipeDiameter(self, index, pipeDiameter)

    def pipeCoefficient(self, index):
        return _pyadcirc.AdcircBoundary_pipeCoefficient(self, index)

    def setPipeCoefficient(self, index, pipeCoefficient):
        return _pyadcirc.AdcircBoundary_setPipeCoefficient(self, index, pipeCoefficient)

    def node1(self, index):
        return _pyadcirc.AdcircBoundary_node1(self, index)

    def setNode1(self, index, node1):
        return _pyadcirc.AdcircBoundary_setNode1(self, index, node1)

    def node2(self, index):
        return _pyadcirc.AdcircBoundary_node2(self, index)

    def setNode2(self, index, node2):
        return _pyadcirc.AdcircBoundary_setNode2(self, index, node2)
    __swig_destroy__ = _pyadcirc.delete_AdcircBoundary
    __del__ = lambda self: None
AdcircBoundary_swigregister = _pyadcirc.AdcircBoundary_swigregister
AdcircBoundary_swigregister(AdcircBoundary)

# This file is compatible with both classic and new-style classes.


